// <auto-generated />
using System;
using DotNetCoreBoilerplate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotNetCoreBoilerplate.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230923101411_Nexship")]
    partial class Nexship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DotNetCoreBoilerplate.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Identity.Models.UserManagment.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Access")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RouteAccess")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BeforeTax")
                        .HasColumnType("float");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("ExternalReferenceNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSoftDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("OtherCharge")
                        .HasColumnType("float");

                    b.Property<string>("ProcurementGroup")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserStamp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "BillUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BeforeTax")
                        .HasColumnType("float");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSoftDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<double>("TaxPercentage")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserStamp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductId");

                    b.ToTable("BillDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.BillPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BillAmount")
                        .HasColumnType("float");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<int?>("CashBankId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSoftDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProcurementGroup")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserStamp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("CashBankId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "BillPaymentUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("BillPayment");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "BrandUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.CashBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "CashBankUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("CashBank");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "CategoryUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Colour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "ColourUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Colour");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "CustomerUniqueConstraint")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.CustomerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContact");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Flavour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "FlavourUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Flavour");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BeforeTax")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("OtherCharge")
                        .HasColumnType("float");

                    b.Property<string>("SalesGroup")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "InvoiceUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BeforeTax")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<double>("TaxPercentage")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.InvoicePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CashBankId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<double>("InvoiceAmount")
                        .HasColumnType("float");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SalesGroup")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CashBankId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "InvoicePaymentUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("InvoicePayment");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LanguageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "LocationUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.NegativeAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("TotalQty")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "NegativeAdjustmentUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("NegativeAdjustment");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.NegativeAdjustmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("NegativeAdjustmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NegativeAdjustmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("NegativeAdjustmentDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PositiveAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("TotalQty")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "PositiveAdjustmentUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("PositiveAdjustment");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PositiveAdjustmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("PositiveAdjustmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PositiveAdjustmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("PositiveAdjustmentDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ColourId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("FlavourId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("InternalCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("MinimumQty")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<int?>("PurchaseTaxId")
                        .HasColumnType("int");

                    b.Property<double>("SalesPrice")
                        .HasColumnType("float");

                    b.Property<int?>("SalesTaxId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("UomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColourId");

                    b.HasIndex("FlavourId");

                    b.HasIndex("PurchaseTaxId");

                    b.HasIndex("SalesTaxId");

                    b.HasIndex("SizeId");

                    b.HasIndex("UomId");

                    b.HasIndex(new[] { "Name", "TenantId" }, "ProductNameUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BeforeTax")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<double>("OtherCharge")
                        .HasColumnType("float");

                    b.Property<string>("ProcurementGroup")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "PurchaseOrderUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BeforeTax")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<double>("TaxPercentage")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ExternalReferenceNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProcurementGroup")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("TotalQtyReceive")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "PurchaseReceiptUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("PurchaseReceipt");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseReceiptDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseReceiptId")
                        .HasColumnType("int");

                    b.Property<double>("QtyReceive")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseReceiptId");

                    b.ToTable("PurchaseReceiptDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProcurementGroup")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PurchaseReceiptId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("TotalQtyReturn")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PurchaseReceiptId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "PurchaseReturnUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("PurchaseReturn");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseReturnDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseReturnId")
                        .HasColumnType("int");

                    b.Property<double>("QtyReturn")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("PurchaseReturnDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("TaxRatePercentage")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "PurchaseTaxUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("PurchaseTax");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.RolePermission", b =>
                {
                    b.Property<long>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RolePermissionId"));

                    b.Property<string>("PermissionKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionId");

                    b.HasIndex(new[] { "RoleId", "PermissionKey" }, "UQ_RolePerm_RoleId_PermKey")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL AND [PermissionKey] IS NOT NULL");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "SalesChannelUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("SalesChannel");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SalesGroup")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ShipperId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("TotalQtyDelivered")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "SalesDeliveryUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("SalesDelivery");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesDeliveryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("QtyDelivered")
                        .HasColumnType("float");

                    b.Property<int?>("SalesDeliveryId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesDeliveryId");

                    b.ToTable("SalesDeliveryDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BeforeTax")
                        .HasColumnType("float");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<double>("OtherCharge")
                        .HasColumnType("float");

                    b.Property<int?>("SalesChannelId")
                        .HasColumnType("int");

                    b.Property<string>("SalesGroup")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesChannelId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "SalesOrderUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BeforeTax")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<double>("TaxPercentage")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SalesDeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("SalesGroup")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("TotalQtyReturn")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SalesDeliveryId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "SalesReturnUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("SalesReturn");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesReturnDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("QtyReturn")
                        .HasColumnType("float");

                    b.Property<int?>("SalesReturnId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesReturnId");

                    b.ToTable("SalesReturnDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("TaxRatePercentage")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "SalesTaxUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("SalesTax");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "ShipperUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Shipper");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "SizeUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenantId"));

                    b.Property<short>("BillNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("BillNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("BillNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<short>("BillPaymentNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("BillPaymentNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("BillPaymentNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Currency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<short>("CustomerNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("CustomerNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("CustomerNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<short>("InvoiceNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("InvoiceNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("InvoiceNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<short>("InvoicePaymentNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("InvoicePaymentNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("InvoicePaymentNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumUser")
                        .HasColumnType("int");

                    b.Property<short>("NegativeAdjustmentNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("NegativeAdjustmentNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("NegativeAdjustmentNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("PositiveAdjustmentNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("PositiveAdjustmentNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("PositiveAdjustmentNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<short>("ProductNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("ProductNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("ProductNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<short>("PurchaseNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("PurchaseNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("PurchaseNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<short>("PurchaseReceiptNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("PurchaseReceiptNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("PurchaseReceiptNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<short>("PurchaseReturnNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("PurchaseReturnNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("PurchaseReturnNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<short>("SalesDeliveryNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("SalesDeliveryNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("SalesDeliveryNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<short>("SalesNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("SalesNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("SalesNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<short>("SalesReturnNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("SalesReturnNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("SalesReturnNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TenantName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("TransferOrderNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("TransferOrderNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("TransferOrderNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<short>("VendorNumberLength")
                        .HasColumnType("smallint");

                    b.Property<string>("VendorNumberPrefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("VendorNumberUseDate")
                        .HasColumnType("bit");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TenantId");

                    b.HasIndex(new[] { "TenantName" }, "IX_Tenant_TenantName")
                        .IsUnique()
                        .HasFilter("[TenantName] IS NOT NULL");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.TransferOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("FromId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("ToId")
                        .HasColumnType("int");

                    b.Property<double>("TotalQty")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.HasIndex(new[] { "Number", "TenantId" }, "TransferOrderUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("TransferOrder");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.TransferOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TransferOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransferOrderId");

                    b.ToTable("TransferOrderDetail");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Uom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "UomUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Uom");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<short>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<string>("IsImpersonate")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsTenantAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDirectoryUpdate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(86)
                        .HasColumnType("nvarchar(86)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Source")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserImage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.UserPermission", b =>
                {
                    b.Property<long>("UserPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserPermissionId"));

                    b.Property<bool?>("Granted")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("PermissionKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPermissionId");

                    b.HasIndex(new[] { "UserId", "PermissionKey" }, "UQ_UserPerm_UserId_PermKey")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL AND [PermissionKey] IS NOT NULL");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.UserPreference", b =>
                {
                    b.Property<int>("UserPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPreferenceId"));

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PreferenceType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserPreferenceId");

                    b.HasIndex(new[] { "UserId", "PreferenceType", "Name" }, "IX_UserPref_UID_PrefType_Name")
                        .IsUnique()
                        .HasFilter("[PreferenceType] IS NOT NULL AND [Name] IS NOT NULL");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.UserRole", b =>
                {
                    b.Property<long>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserRoleId"));

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex(new[] { "RoleId", "UserId" }, "IX_UserRoles_RoleId_UserId");

                    b.HasIndex(new[] { "UserId", "RoleId" }, "UQ_UserRoles_UserId_RoleId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL AND [RoleId] IS NOT NULL");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "VendorUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.VendorContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorContact");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.VersionInfo", b =>
                {
                    b.Property<DateTime?>("AppliedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.ToTable("VersionInfo");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "TenantId" }, "WarehouseUniqueConstraint")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Bill", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Bills")
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.BillDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("BillDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.BillPayment", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Bill", "Bill")
                        .WithMany("BillPayments")
                        .HasForeignKey("BillId");

                    b.HasOne("DotNetCoreBoilerplate.Models.CashBank", "CashBank")
                        .WithMany("BillPayments")
                        .HasForeignKey("CashBankId");

                    b.Navigation("Bill");

                    b.Navigation("CashBank");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.CustomerContact", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Customer", "Customer")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Invoice", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.SalesOrder", "SalesOrder")
                        .WithMany("Invoices")
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.InvoiceDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.InvoicePayment", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.CashBank", "CashBank")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("CashBankId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Invoice", "Invoice")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("CashBank");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.NegativeAdjustment", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Location", "Location")
                        .WithMany("NegativeAdjustments")
                        .HasForeignKey("LocationId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Warehouse", "Warehouse")
                        .WithMany("NegativeAdjustments")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Location");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.NegativeAdjustmentDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.NegativeAdjustment", "NegativeAdjustment")
                        .WithMany("NegativeAdjustmentDetails")
                        .HasForeignKey("NegativeAdjustmentId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("NegativeAdjustmentDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("NegativeAdjustment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PositiveAdjustment", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Location", "Location")
                        .WithMany("PositiveAdjustments")
                        .HasForeignKey("LocationId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Warehouse", "Warehouse")
                        .WithMany("PositiveAdjustments")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Location");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PositiveAdjustmentDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.PositiveAdjustment", "PositiveAdjustment")
                        .WithMany("PositiveAdjustmentDetails")
                        .HasForeignKey("PositiveAdjustmentId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("PositiveAdjustmentDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("PositiveAdjustment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Product", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Colour", "Colour")
                        .WithMany("Products")
                        .HasForeignKey("ColourId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Flavour", "Flavour")
                        .WithMany("Products")
                        .HasForeignKey("FlavourId");

                    b.HasOne("DotNetCoreBoilerplate.Models.PurchaseTax", "PurchaseTax")
                        .WithMany("Products")
                        .HasForeignKey("PurchaseTaxId");

                    b.HasOne("DotNetCoreBoilerplate.Models.SalesTax", "SalesTax")
                        .WithMany("Products")
                        .HasForeignKey("SalesTaxId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Uom", "Uom")
                        .WithMany("Products")
                        .HasForeignKey("UomId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Colour");

                    b.Navigation("Flavour");

                    b.Navigation("PurchaseTax");

                    b.Navigation("SalesTax");

                    b.Navigation("Size");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseOrder", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseOrderDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("DotNetCoreBoilerplate.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseReceipt", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Location", "Location")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("LocationId");

                    b.HasOne("DotNetCoreBoilerplate.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Warehouse", "Warehouse")
                        .WithMany("PurchaseReceipts")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Location");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseReceiptDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("PurchaseReceiptDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("DotNetCoreBoilerplate.Models.PurchaseReceipt", "PurchaseReceipt")
                        .WithMany("PurchaseReceiptDetails")
                        .HasForeignKey("PurchaseReceiptId");

                    b.Navigation("Product");

                    b.Navigation("PurchaseReceipt");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseReturn", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Location", "Location")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("LocationId");

                    b.HasOne("DotNetCoreBoilerplate.Models.PurchaseReceipt", "PurchaseReceipt")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("PurchaseReceiptId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Warehouse", "Warehouse")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Location");

                    b.Navigation("PurchaseReceipt");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseReturnDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("PurchaseReturnDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("DotNetCoreBoilerplate.Models.PurchaseReturn", "PurchaseReturn")
                        .WithMany("PurchaseReturnDetails")
                        .HasForeignKey("PurchaseReturnId");

                    b.Navigation("Product");

                    b.Navigation("PurchaseReturn");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Role", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Tenant", "Tenant")
                        .WithMany("Roles")
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.RolePermission", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesDelivery", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Location", "Location")
                        .WithMany("SalesDeliveries")
                        .HasForeignKey("LocationId");

                    b.HasOne("DotNetCoreBoilerplate.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesDeliveries")
                        .HasForeignKey("SalesOrderId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Shipper", "Shipper")
                        .WithMany("SalesDeliveries")
                        .HasForeignKey("ShipperId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Warehouse", "Warehouse")
                        .WithMany("SalesDeliveries")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Location");

                    b.Navigation("SalesOrder");

                    b.Navigation("Shipper");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesDeliveryDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("SalesDeliveryDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("DotNetCoreBoilerplate.Models.SalesDelivery", "SalesDelivery")
                        .WithMany("SalesDeliveryDetails")
                        .HasForeignKey("SalesDeliveryId");

                    b.Navigation("Product");

                    b.Navigation("SalesDelivery");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesOrder", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("DotNetCoreBoilerplate.Models.SalesChannel", "SalesChannel")
                        .WithMany("SalesOrders")
                        .HasForeignKey("SalesChannelId");

                    b.Navigation("Customer");

                    b.Navigation("SalesChannel");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesOrderDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("DotNetCoreBoilerplate.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesReturn", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Location", "Location")
                        .WithMany("SalesReturns")
                        .HasForeignKey("LocationId");

                    b.HasOne("DotNetCoreBoilerplate.Models.SalesDelivery", "SalesDelivery")
                        .WithMany("SalesReturns")
                        .HasForeignKey("SalesDeliveryId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Warehouse", "Warehouse")
                        .WithMany("SalesReturns")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Location");

                    b.Navigation("SalesDelivery");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesReturnDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("SalesReturnDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("DotNetCoreBoilerplate.Models.SalesReturn", "SalesReturn")
                        .WithMany("SalesReturnDetails")
                        .HasForeignKey("SalesReturnId");

                    b.Navigation("Product");

                    b.Navigation("SalesReturn");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.TransferOrder", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Warehouse", "From")
                        .WithMany("TransferOrderFroms")
                        .HasForeignKey("FromId");

                    b.HasOne("DotNetCoreBoilerplate.Models.Warehouse", "To")
                        .WithMany("TransferOrderTos")
                        .HasForeignKey("ToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.TransferOrderDetail", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Product", "Product")
                        .WithMany("TransferOrderDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("DotNetCoreBoilerplate.Models.TransferOrder", "TransferOrder")
                        .WithMany("TransferOrderDetails")
                        .HasForeignKey("TransferOrderId");

                    b.Navigation("Product");

                    b.Navigation("TransferOrder");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.User", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.UserPermission", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.UserRole", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("DotNetCoreBoilerplate.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.VendorContact", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Models.Vendor", "Vendor")
                        .WithMany("VendorContacts")
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Identity.Models.UserManagment.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Identity.Models.UserManagment.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetCoreBoilerplate.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DotNetCoreBoilerplate.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Bill", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("BillPayments");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.CashBank", b =>
                {
                    b.Navigation("BillPayments");

                    b.Navigation("InvoicePayments");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Colour", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Customer", b =>
                {
                    b.Navigation("CustomerContacts");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Flavour", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoicePayments");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Location", b =>
                {
                    b.Navigation("NegativeAdjustments");

                    b.Navigation("PositiveAdjustments");

                    b.Navigation("PurchaseReceipts");

                    b.Navigation("PurchaseReturns");

                    b.Navigation("SalesDeliveries");

                    b.Navigation("SalesReturns");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.NegativeAdjustment", b =>
                {
                    b.Navigation("NegativeAdjustmentDetails");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PositiveAdjustment", b =>
                {
                    b.Navigation("PositiveAdjustmentDetails");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Product", b =>
                {
                    b.Navigation("BillDetails");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("NegativeAdjustmentDetails");

                    b.Navigation("PositiveAdjustmentDetails");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("PurchaseReceiptDetails");

                    b.Navigation("PurchaseReturnDetails");

                    b.Navigation("SalesDeliveryDetails");

                    b.Navigation("SalesOrderDetails");

                    b.Navigation("SalesReturnDetails");

                    b.Navigation("TransferOrderDetails");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseOrder", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("PurchaseReceipts");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseReceipt", b =>
                {
                    b.Navigation("PurchaseReceiptDetails");

                    b.Navigation("PurchaseReturns");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseReturn", b =>
                {
                    b.Navigation("PurchaseReturnDetails");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.PurchaseTax", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesChannel", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesDelivery", b =>
                {
                    b.Navigation("SalesDeliveryDetails");

                    b.Navigation("SalesReturns");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesOrder", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("SalesDeliveries");

                    b.Navigation("SalesOrderDetails");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesReturn", b =>
                {
                    b.Navigation("SalesReturnDetails");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.SalesTax", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Shipper", b =>
                {
                    b.Navigation("SalesDeliveries");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Size", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Tenant", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.TransferOrder", b =>
                {
                    b.Navigation("TransferOrderDetails");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Uom", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.User", b =>
                {
                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Vendor", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("VendorContacts");
                });

            modelBuilder.Entity("DotNetCoreBoilerplate.Models.Warehouse", b =>
                {
                    b.Navigation("NegativeAdjustments");

                    b.Navigation("PositiveAdjustments");

                    b.Navigation("PurchaseReceipts");

                    b.Navigation("PurchaseReturns");

                    b.Navigation("SalesDeliveries");

                    b.Navigation("SalesReturns");

                    b.Navigation("TransferOrderFroms");

                    b.Navigation("TransferOrderTos");
                });
#pragma warning restore 612, 618
        }
    }
}
